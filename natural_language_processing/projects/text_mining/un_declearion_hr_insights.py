# -*- coding: utf-8 -*-
"""un_declearion_hr_insights.ipynb

Automatically generated by Colaboratory.
"""

from textblob import TextBlob
from wordcloud import WordCloud, STOPWORDS
import matplotlib.pyplot as plt
from matplotlib.ticker import FixedLocator
from PIL import Image
import numpy as np
import pandas as pd
from operator import itemgetter
import nltk
from nltk.corpus import stopwords

# Open the file and read its contents into a string variable
with open("un_declaration_hr_text_data.txt", "r") as f:
    text = f.read()

blob = TextBlob(text)

# Generate a list of stop words
stop_words = set(STOPWORDS)
stop_words.update(["shall", "may", "article","every", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten"])

# Generate a WordCloud object from the TextBlob
wordcloud = WordCloud(stopwords=stop_words, background_color="white",
                      width=1080, height=1080).generate(str(blob))

# Display the WordCloud
plt.imshow(wordcloud, interpolation="bilinear")
plt.axis("off")
plt.show()

# Save the WordCloud as an image file
wordcloud.to_file("word_cloud.png")

nltk.download('stopwords')
nltk.download('punkt')

num_string = []
for i in range(100):
  num_string.append(str(i))

# Create a list of additional stop words
additional_stopwords = ['shall', 'may', "one", "two", "three", "four", "five",
                        "six", "seven", "eight", "nine", "ten", 'freedoms',
                        "article", 'whereas']  + num_string

# Get the default list of stop words from the stopwords module
default_stopwords = set(stopwords.words('english'))

# Combine the default and additional stop words
stop_words = default_stopwords.union(additional_stopwords)

items = blob.word_counts.items()
items = [item for item in items if item[0] not in stop_words]
sorted_items = sorted(items, key=itemgetter(1), reverse=True)
top20 = sorted_items[1:26]
columns = ['word', 'count']
df = pd.DataFrame(top20, columns=columns)

# Create a new figure and subplot
fig, ax = plt.subplots(figsize=(10.8, 10.8))

# Generate the bar chart on the subplot
ax.bar(df['word'], df['count'])

# Set the x-axis tick labels to the words
ax.xaxis.set_major_locator(FixedLocator(range(len(df))))
ax.set_xticklabels(df['word'], rotation=90)

# Set the axis labels and title
ax.set_xlabel('Word')
ax.set_ylabel('Count')
ax.set_title('Most Frequent Terms')

# Save the bar chart to a file
plt.savefig('most_freq_terms.png', dpi=300, bbox_inches='tight')

